{
  "compilerOptions": {
    // インポートパスの基準ディレクトリ
    "baseUrl": ".",

    // 出力するコードのECMAScriptのバージョン
    "target": "ES2017",

    // コンパイル時に利用する型定義ライブラリ （.d.tsファイル内の型定義を読み込むために必要）
    "lib": ["dom", "dom.iterable", "esnext"],

    // プロジェクト内の JavaScript ファイルも処理対象に含める （.jsファイルを読み込むために必要）
    "allowJs": true,

    // 外部ライブラリの型チェックをスキップ
    "skipLibCheck": true,

    // 厳格な型チェックを有効化
    // noImplicitAny: 型が明示されていない場合に any 型を暗黙的に割り当てることを禁止
    // strictNullChecks: null と undefined を他の型と区別して扱う
    // strictFunctionTypes, strictBindCallApply: 関数の型チェックを厳格化
    // strictPropertyInitialization: プロパティの初期化を厳格化
    // strict: 上記の厳格な型チェックを有効化
    "strict": true,

    // コンパイラ (tsc) が出力したファイルを生成しない
    // ファイルの生成はバンドル時のみ行う
    "noEmit": true,

    // 古い CommonJS 互換性を有効化
    // (例) import * as React from 'react' を import React from 'react' に変換
    "esModuleInterop": true,

    // TypeScriptの出力モジュール形式 (バンドラーに渡すコードの形式)
    // esnext = 最新のECMAScript Module形式（import/export構文）
    //
    // esnextの場合
    //  入力: TypeScript
    //  import { Button } from './components';
    //  export function App() { ... }
    //  出力: JavaScript
    //  import { Button } from './components';
    //  export function App() { ... }
    "module": "esnext",

    // モジュール解決の方法
    // bundler = バンドルツールのモジュール解決方式
    // node = 古いNode.js方式（CommonJS優先）
    // nodenext = Node.jsの最新方式（ESM優先）
    //
    // bundlerの特徴
    //  Webpack、Vite、esbuild等のモダンバンドラーと互換性のある解決方式
    //  package.jsonのexportsフィールド対応（条件付きエントリポイント）
    //  .ts、.tsx、.js、.jsxなどの拡張子自動解決
    //  node_modules探索アルゴリズム
    "moduleResolution": "bundler",

    // JSONファイルをモジュールとして解決
    // JSONファイルを直接インポートできるようにする設定
    "resolveJsonModule": true,

    // 独立したモジュールを生成を有効化
    // モジュールを独立して生成することで、モジュールの衝突を防ぐ
    // Next.js、Viteなどの高速変換ツールと互換性を持たせるための設定
    "isolatedModules": true,

    // JSXの処理方式
    // <div>Hello</div>のような構文をどう扱うか決める設定
    // preserve = 元のJSX構文をそのまま保持
    //  例：　const element = <div>Hello</div>;
    // react = ReactのJSX構文に変換
    //  例：　const element = React.createElement("div", null, "Hello");
    "jsx": "preserve",

    // TypeScriptのコンパイル速度を向上させるための設定
    // 主な機能
    //  1. 前回のコンパイル情報を保存し再利用
    //  2. 依存関係を分析し、必要なファイルのみを再コンパイル
    "incremental": true,

    // プラグインの設定
    "plugins": [
      {
        // Next.jsプロジェクト向けのTypeScript拡張機能
        // 1. ページルーティングの型チェック
        //  例：　pages/user/[id].tsx → type Params = { id: string; }
        //
        // 2. getStaticProps, getServerSidePropsなどの関数の型定義
        //  例：　const getStaticProps: GetStaticProps<{ posts: Post[] }> = async () => {
        //
        // 3. Next.js固有のAPI型を提供
        //  例：　const router = useRouter();
        "name": "next"
      }
    ],

    // パスのエイリアスを定義
    "paths": {
      // 例：　import { Button } from '@/components/Button';
      "@/*": ["./src/*"],

      // 例：　import { Post } from 'contentlayer/generated';
      "contentlayer/generated": ["./.contentlayer/generated"]
    }
  },

  // コンパイル対象のファイルを指定
  // TypeScriptに「これらのファイルを型チェック・処理してください」と伝える
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    ".contentlayer/generated/**/*.ts"
  ],

  // コンパイル対象外のファイルを指定
  "exclude": ["node_modules"]
}
