{
  "compilerOptions": {
    // パッケージを import する際の基準ディレクトリ
    "baseUrl": ".",

    // TypeScript コードが最終的にどのバージョンの JavaScript に変換 (コンパイル) されるかを決定する
    "target": "ES2017",

    // TypeScript コードを JavaScript に変換 (コンパイル) する際に利用する型定義ライブラリを指定する
    "lib": ["dom", "dom.iterable", "esnext"],

    // プロジェクト内の JavaScript ファイルも処理対象に含める (.js ファイルを読み込むために必要)
    "allowJs": true,

    // 外部ライブラリの型定義ファイル (.d.ts ファイル) 内部の問題をスキップする (コンパイル時間の短縮のため)
    "skipLibCheck": true,

    // 厳格な型チェックを有効化
    // noImplicitAny - 型が明示されていない場合に any 型を暗黙的に割り当てることを禁止
    // strictNullChecks - null と undefined を他の型と区別して扱う
    // strict - 上記の厳格な型チェックを有効化
    "strict": true,

    // TypeScript コンパイラは型チェックのみを行い、ファイルの生成を行わないようにする
    "noEmit": true,

    // CommonJS モジュールを ES Modules 形式 (import x from 'y') でインポートできるようにする設定
    // 例: import * as React from 'react' → import React from 'react'
    "esModuleInterop": true,

    // TypeScript コードをコンパイルした結果として生成される JavaScript ファイルのモジュール形式を指定
    // esnext = 最新の ES Modules 形式 (import/export 構文)
    "module": "esnext",

    // モジュール解決の方法を指定
    // bundler = バンドルツールのモジュール解決方式
    "moduleResolution": "bundler",

    // .json ファイルを直接 import できるようにする設定
    "resolveJsonModule": true,

    // TypeScript の各ファイルを独立したモジュールとして扱うための設定
    // ファイルを独立して処理できるため、並列処理が可能になり、ビルド速度が向上
    "isolatedModules": true,

    // JSX の処理方式を指定
    // preserve = TypeScript コンパイラは元の JSX 構文をそのまま保持する
    // Next.js では、JSX の処理方式を preserve にすることで、Next.js の独自の JSX 変換機能を利用できる
    "jsx": "preserve",

    // TypeScript のコンパイル速度を向上させるための設定
    // 主な機能
    //  1. 前回のコンパイル情報を保存し再利用
    //  2. 依存関係を分析し、必要なファイルのみを再コンパイル
    "incremental": true,

    // プラグインの設定
    "plugins": [
      {
        // Next.js プロジェクト向けの TypeScript 拡張機能
        // 1. ページルーティングの型チェック
        //  例：　pages/user/[id].tsx → type Params = { id: string; }
        //
        // 2. getStaticProps,getServerSideProps などの関数の型定義
        //  例：　const getStaticProps: GetStaticProps<{ posts: Post[] }> = async () => {
        //
        // 3. Next.js 固有の API 型を提供
        //  例：　const router = useRouter();
        "name": "next"
      }
    ],

    // パスのエイリアスを定義
    "paths": {
      // 例：　import { Button } from '@/components/Button';
      "@/*": ["./src/*"],

      // 例：　import { Post } from 'contentlayer/generated';
      "contentlayer/generated": ["./.contentlayer/generated"]
    }
  },

  // コンパイル対象のファイルを指定
  // TypeScript に 「これらのファイルを型チェック・処理してください」 と伝える
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    ".contentlayer/generated/**/*.ts"
  ],

  // コンパイル対象外のファイルを指定
  "exclude": ["node_modules"]
}
